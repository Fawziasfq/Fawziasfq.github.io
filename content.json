[{"title":"Webpack学习笔记","date":"2017-03-07T13:27:33.000Z","path":"2017/03/07/Webpack学习笔记/","text":"Webpack是如今最热门的前端资源模块化管理和打包工具。 将松散的模块按照依赖和规则打包成符合生产环境部署的前端资源。 将按需加载的模块进行代码分隔，等到实际需要的时候再异步加载。 通过loader的转换，任何形式的资源都可以视为模块。 什么是WebpackWebpack是一个将根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源的模块打包器。 适用于维护一个大规模的代码库中各种资源的分割和存放，依赖关系和无缝整合到一起生成适合浏览器端请求加载的静态资源。可以完成： 将依赖树拆分成按需加载的块； 初始化加载的耗时时间少； 各种静态资源可以视作模块 将第三方静态资源整合成模块的能力； 可以自定义打包逻辑的能力； 适合大项目，无论是单页的还是多页的Web应用。 Webpack的特点主要是和其它模块化工具的区别： 代码拆分：Webpack有两种组织模块依赖的方式，同步和异步。优化依赖树后，每一个异步区块都作为一个文件被打包。 虽然Webpack只能处理原生的javascript模块，但是loader转换器可以将各种类型的资源转换成javascript模块。 智能解析：Webpack有一个智能解析库，几乎可以处理任何第三方库。 插件系统：Webpack有一个功能丰富的插件系统，大多数内容功能都是基于这个插件系统运行的。 快速运行：Webpack使用异步I/O和多级缓存提高运行效率。","tags":[]},{"title":"重绘和重排的性能优化","date":"2017-03-06T14:17:44.000Z","path":"2017/03/06/重绘和重排的性能优化/","text":"重排：当DOM变化影响了元素的几何属性，页面中的其他元素的集合属性也可能会受影响，浏览器就需要重新计算元素的几何属性，这样渲染树就发生了变化，也就是重新构造了渲染树，这个过程叫做重排。 重绘：如果DOM变化仅仅只是影响了背景色等等非几何属性，就发生的是重绘而不是重排，因为布局没有发生变化。 触发重排页面布局和几何属性的变化： 页面初始渲染； 添加/删除可见的DOM元素； 改变元素的位置； 改变元素的尺寸； 改变元素内容； 改变窗口尺寸； 不同情况下发生的重排的范围及程度不同，某些情况下会重排整个页面，比如滑动滚动条。 浏览器的优化：渲染队列现代浏览器都有渲染队列的机制，当改变元素的一个样式会导致浏览器发生重排或重绘时，它会进入一个渲染队列，然后如果后面还有样式修改，同样入队，知道没有样式修改，按照渲染队列批量执行来重排过程，一并修改样式，这样就把本该几次的重排优化成了一次。 但是offset-，会强制刷新队列要求样式修改任务立即执行。会刷新渲染队列 offset- client- scroll- getComputedStyle()（IE中的currentStyle） 重绘和重排的性能优化分离读写操作把读操作移到写操作后，TRBL这这些操作写到一起，offset的操作写到一起，这样就会几次重排合成一次重排。 样式集中改变 javascript中改变样式直接用cssText属性合并所有样式改变。这样就只会触发依次重排。但是cssText会覆盖已有的行间样式，所以要保留原有的行间样式就使用 “+=” 修改class类名来进行样式修改。 缓存布局信息分离读写操作 元素批量修改","tags":[{"name":"javascript","slug":"javascript","permalink":"https://github.com/Fawziasfq/tags/javascript/"},{"name":"性能优化","slug":"性能优化","permalink":"https://github.com/Fawziasfq/tags/性能优化/"}]},{"title":"字符串和正则表达式","date":"2017-03-02T13:58:23.000Z","path":"2017/03/02/字符串和正则表达式/","text":"几乎所有的javascript程序都与字符串操作密切相关，一个典型的应用程序通常需要处理大量类似合并、分割、重新排序、搜索、遍历等字符串操作。 字符串连接字符串链接会导致令人惊讶的性能问题。构建字符串的常用方法是：通过循环，向字符串末尾不断地添加内容。有很多方法可以优化这类任何，多种方法合并字符串： the + operator the += operator array.join() string.concat() 这类方法运行速度都很快，随着需要合并的字符串的长度和数量的增加，一些方法的优势开始展现。 加和加等操作符除了IE7及之前的版本的所有浏览器都对它们进行了良好的优化。","tags":[{"name":"javascript","slug":"javascript","permalink":"https://github.com/Fawziasfq/tags/javascript/"}]},{"title":"Hello World","date":"2017-03-01T07:32:19.559Z","path":"2017/03/01/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]